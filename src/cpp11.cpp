// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// cpp11_predict.cpp
cpp11::list cpp11_predict(cpp11::list object, cpp11::doubles_matrix<> x, cpp11::sexp sparse_x, std::string prediction_type, const size_t seed, const size_t n_thread, const bool verbose);
extern "C" SEXP _literanger_cpp11_predict(SEXP object, SEXP x, SEXP sparse_x, SEXP prediction_type, SEXP seed, SEXP n_thread, SEXP verbose) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp11_predict(cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(object), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(x), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(sparse_x), cpp11::as_cpp<cpp11::decay_t<std::string>>(prediction_type), cpp11::as_cpp<cpp11::decay_t<const size_t>>(seed), cpp11::as_cpp<cpp11::decay_t<const size_t>>(n_thread), cpp11::as_cpp<cpp11::decay_t<const bool>>(verbose)));
  END_CPP11
}
// cpp11_train.cpp
cpp11::list cpp11_train(cpp11::doubles_matrix<> x, cpp11::doubles_matrix<> y, cpp11::sexp sparse_x, cpp11::doubles case_weights, std::string tree_type, const size_t n_tree, cpp11::strings predictor_names, cpp11::strings names_of_unordered, const bool replace, cpp11::doubles sample_fraction, size_t n_try, cpp11::list draw_predictor_weights, cpp11::strings names_of_always_draw, std::string split_rule, const size_t max_depth, size_t min_split_n_sample, size_t min_leaf_n_sample, cpp11::doubles response_weights, const size_t n_random_split, const double alpha, const double min_prop, const size_t seed, const bool save_memory, const size_t n_thread, const bool verbose);
extern "C" SEXP _literanger_cpp11_train(SEXP x, SEXP y, SEXP sparse_x, SEXP case_weights, SEXP tree_type, SEXP n_tree, SEXP predictor_names, SEXP names_of_unordered, SEXP replace, SEXP sample_fraction, SEXP n_try, SEXP draw_predictor_weights, SEXP names_of_always_draw, SEXP split_rule, SEXP max_depth, SEXP min_split_n_sample, SEXP min_leaf_n_sample, SEXP response_weights, SEXP n_random_split, SEXP alpha, SEXP min_prop, SEXP seed, SEXP save_memory, SEXP n_thread, SEXP verbose) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp11_train(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(x), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(y), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(sparse_x), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(case_weights), cpp11::as_cpp<cpp11::decay_t<std::string>>(tree_type), cpp11::as_cpp<cpp11::decay_t<const size_t>>(n_tree), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(predictor_names), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(names_of_unordered), cpp11::as_cpp<cpp11::decay_t<const bool>>(replace), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(sample_fraction), cpp11::as_cpp<cpp11::decay_t<size_t>>(n_try), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(draw_predictor_weights), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(names_of_always_draw), cpp11::as_cpp<cpp11::decay_t<std::string>>(split_rule), cpp11::as_cpp<cpp11::decay_t<const size_t>>(max_depth), cpp11::as_cpp<cpp11::decay_t<size_t>>(min_split_n_sample), cpp11::as_cpp<cpp11::decay_t<size_t>>(min_leaf_n_sample), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(response_weights), cpp11::as_cpp<cpp11::decay_t<const size_t>>(n_random_split), cpp11::as_cpp<cpp11::decay_t<const double>>(alpha), cpp11::as_cpp<cpp11::decay_t<const double>>(min_prop), cpp11::as_cpp<cpp11::decay_t<const size_t>>(seed), cpp11::as_cpp<cpp11::decay_t<const bool>>(save_memory), cpp11::as_cpp<cpp11::decay_t<const size_t>>(n_thread), cpp11::as_cpp<cpp11::decay_t<const bool>>(verbose)));
  END_CPP11
}

extern "C" {
/* .Call calls */
extern SEXP run_testthat_tests(void *);

static const R_CallMethodDef CallEntries[] = {
    {"_literanger_cpp11_predict", (DL_FUNC) &_literanger_cpp11_predict,  7},
    {"_literanger_cpp11_train",   (DL_FUNC) &_literanger_cpp11_train,   25},
    {"run_testthat_tests",        (DL_FUNC) &run_testthat_tests,         1},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_literanger(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
